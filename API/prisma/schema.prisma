// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Tablas de los libros

model book {
  id Int @id @default(autoincrement())
  name String
  description String?
  editorial editorial[]
  author author[]
  gender gender[]
  n_pages Int?
  edition_year String?
  price Float?
  id_location Int
  n_edition Int?
  stock Int @default(0)
  language language[]
  book_code String @unique
  caratula String // debe ser un arreglo
  location location @relation(fields: [id_location], references: [id])
  lending lending[]
  createdAt DateTime @default(now())
  updateAt DateTime?
  deletedAd DateTime?
}

model editorial {
  id Int @id @default(autoincrement())
  name String
  phone_number String?
  city String?
  books book[]
  createdAt DateTime @default(now())
  updateAt DateTime?
  deletedAd DateTime?
}

model author {
  id Int @id @default(autoincrement())
  name String
  surname String?
  nacionality String?
  profile_picture String?
  books book[]
  createdAt DateTime @default(now())
  updateAt DateTime?
  deletedAd DateTime?
}

model gender {
  id Int @id @default(autoincrement())
  gender String
  books book[]
  createdAt DateTime @default(now())
  updateAt DateTime?
  deletedAd DateTime?
}

model location {
  id Int @id @default(autoincrement())
  shelf_number String @unique
  books book[]
  createdAt DateTime @default(now())
  updateAt DateTime?
  deletedAd DateTime?
}

model language {
  id Int @id @default(autoincrement())
  name String
  books book[]
  createdAt DateTime @default(now())
  updateAt DateTime?
  deletedAd DateTime?
}

model aud_book{
  id Int @id @default(autoincrement())
  name_book String
  code_book String
  edited_field String
  createdAt DateTime @default(now())
}

// Tablas del usuario

model profile {
  name String
  surname String?
  residence String?
  phone_number String?
  age Int?
  id_user Int @unique
  createdAt DateTime @default(now())
  updateAt DateTime?
  deletedAd DateTime?
  user user @relation(fields: [id_user], references: [id])
}
model user{
  id Int @id @default(autoincrement())
  email String @unique
  password String
  id_role role?
  id_state state?
  profile profile?
  lending lending[]
  createdAt DateTime @default(now())
  updateAt DateTime?
  deletedAd DateTime?
}
model role{
  id Int @id @default(autoincrement())
  role String
  id_user Int @unique
  user user @relation(fields: [id_user], references: [id])
  createdAt DateTime @default(now())
  updateAt DateTime?
  deletedAd DateTime?
}
model state{
  id Int @id @default(autoincrement())
  state String
  id_user Int @unique
  createdAt DateTime @default(now())
  updateAt DateTime?
  deletedAd DateTime?
  user user @relation(fields: [id_user], references: [id])
}

model aud_login{
  id Int @id @default(autoincrement())
  user String
  date_login DateTime @default(now())
  date_logout DateTime ?
}
// Tabla de prestamos

model lending{
  id Int @id @default(autoincrement())
  books book[]
  id_user Int
  user user @relation(fields: [id_user], references: [id])
  createdAt DateTime @default(now())
  returnAt DateTime?
  user_session String
  state String
  updateAt DateTime?
  deletedAd DateTime?
}

// Relaciones entre tablas principales
