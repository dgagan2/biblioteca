// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Tablas de los libros

model book {
  id Int @id @default(autoincrement())
  name String
  id_editorial book_editorial[]
  id_author book_author[]
  id_gender book_gender[]
  n_pages Int?
  edition_year DateTime
  price Float?
  id_location Int
  n_edition Int?
  stock Int @default(0)
  id_language book_language[]
  book_code String @unique
  caratula String // debe ser un arreglo
  location location @relation(fields: [id_location], references: [id])
  lending lending_book[]
}

model Editorial {
  id Int @id @default(autoincrement())
  name String
  phone_number Int
  city String
  books book_editorial[]
}
model book_editorial {
  book book @relation(fields: [book_id_editorial], references: [id])
  book_id_editorial Int
  editorial Editorial @relation(fields: [editorial_id], references: [id])
  editorial_id Int

  @@id([book_id_editorial, editorial_id])

}

model author {
  id Int @id @default(autoincrement())
  name String
  surname String
  nacionality String
  profile_picture String
  books book_author[]
}
model book_author{
  book book @relation(fields: [book_id_author], references: [id] )
  book_id_author Int
  author author @relation(fields: [author_id], references: [id])
  author_id Int

  @@id([book_id_author, author_id])
}

model gender {
  id Int @id @default(autoincrement())
  gender String
  books book_gender[]
}
model book_gender{
  book book @relation(fields: [book_id_gender], references: [id])
  book_id_gender Int
  gender gender @relation(fields: [gender_id], references: [id])
  gender_id Int

  @@id([book_id_gender, gender_id])
}

model location {
id Int @id @default(autoincrement())
shelf_number String @unique
books book[]
}

model language {
  id Int @id @default(autoincrement())
  name String
  books book_language[]
}
model book_language{
  books book @relation(fields: [book_id_language], references: [id])
  book_id_language Int
  languaje language @relation(fields: [language_id], references: [id])
  language_id Int

  @@id([book_id_language, language_id])
}

model aud_book{
  id Int @id @default(autoincrement())
  name_book String
  code_book String
  edited_field String
  createdAt DateTime @default(now())
}

// Tablas del usuario

model people {
  id Int @id
  name String
  surname String
  residence String?
  phone_number String?
  id_user Int
  user user @relation(fields: [id_user], references: [id])
  lending lending[]
  createdAt DateTime @default(now())
}
model user{
  id Int @id @default(autoincrement())
  email String @unique
  password String
  id_role role[]
  id_state state[]
  profile people[]
}
model role{
  id Int @id @default(autoincrement())
  role String
  id_user Int
  user user @relation(fields: [id_user], references: [id])
}
model state{
  id Int @id @default(autoincrement())
  state String
  id_user Int
  user user @relation(fields: [id_user], references: [id])
}

// Tabla de prestamos

model lending{
  id Int @id @default(autoincrement())
  id_book lending_book[]
  id_people Int
  people people @relation(fields: [id_people], references: [id])
  createdAt DateTime @default(now())
  returnAt DateTime?
  user_sesion String
  state String
}

// Relaciones entre tablas principales

model lending_book{
  lending lending @relation(fields: [lending_id_book], references: [id])
  lending_id_book Int
  books book @relation(fields: [book_id], references: [id])
  book_id Int
  @@id([lending_id_book, book_id])
}